// source: akushon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.akushon_interfaces.proto.ConfigActions', null, global);
goog.exportSymbol('proto.akushon_interfaces.proto.ConfigRunAction', null, global);
goog.exportSymbol('proto.akushon_interfaces.proto.Empty', null, global);
goog.exportSymbol('proto.akushon_interfaces.proto.SetJointsData', null, global);
goog.exportSymbol('proto.akushon_interfaces.proto.SetTorquesData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akushon_interfaces.proto.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akushon_interfaces.proto.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akushon_interfaces.proto.Empty.displayName = 'proto.akushon_interfaces.proto.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akushon_interfaces.proto.ConfigActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akushon_interfaces.proto.ConfigActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akushon_interfaces.proto.ConfigActions.displayName = 'proto.akushon_interfaces.proto.ConfigActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akushon_interfaces.proto.SetJointsData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akushon_interfaces.proto.SetJointsData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akushon_interfaces.proto.SetJointsData.displayName = 'proto.akushon_interfaces.proto.SetJointsData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akushon_interfaces.proto.ConfigRunAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akushon_interfaces.proto.ConfigRunAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akushon_interfaces.proto.ConfigRunAction.displayName = 'proto.akushon_interfaces.proto.ConfigRunAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.akushon_interfaces.proto.SetTorquesData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.akushon_interfaces.proto.SetTorquesData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.akushon_interfaces.proto.SetTorquesData.displayName = 'proto.akushon_interfaces.proto.SetTorquesData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akushon_interfaces.proto.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.akushon_interfaces.proto.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akushon_interfaces.proto.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akushon_interfaces.proto.Empty}
 */
proto.akushon_interfaces.proto.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akushon_interfaces.proto.Empty;
  return proto.akushon_interfaces.proto.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akushon_interfaces.proto.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akushon_interfaces.proto.Empty}
 */
proto.akushon_interfaces.proto.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akushon_interfaces.proto.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akushon_interfaces.proto.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akushon_interfaces.proto.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akushon_interfaces.proto.ConfigActions.prototype.toObject = function(opt_includeInstance) {
  return proto.akushon_interfaces.proto.ConfigActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akushon_interfaces.proto.ConfigActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.ConfigActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonActions: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akushon_interfaces.proto.ConfigActions}
 */
proto.akushon_interfaces.proto.ConfigActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akushon_interfaces.proto.ConfigActions;
  return proto.akushon_interfaces.proto.ConfigActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akushon_interfaces.proto.ConfigActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akushon_interfaces.proto.ConfigActions}
 */
proto.akushon_interfaces.proto.ConfigActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akushon_interfaces.proto.ConfigActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akushon_interfaces.proto.ConfigActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akushon_interfaces.proto.ConfigActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.ConfigActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJsonActions();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string json_actions = 1;
 * @return {string}
 */
proto.akushon_interfaces.proto.ConfigActions.prototype.getJsonActions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akushon_interfaces.proto.ConfigActions} returns this
 */
proto.akushon_interfaces.proto.ConfigActions.prototype.setJsonActions = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.toObject = function(opt_includeInstance) {
  return proto.akushon_interfaces.proto.SetJointsData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akushon_interfaces.proto.SetJointsData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.SetJointsData.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    jointsData: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akushon_interfaces.proto.SetJointsData}
 */
proto.akushon_interfaces.proto.SetJointsData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akushon_interfaces.proto.SetJointsData;
  return proto.akushon_interfaces.proto.SetJointsData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akushon_interfaces.proto.SetJointsData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akushon_interfaces.proto.SetJointsData}
 */
proto.akushon_interfaces.proto.SetJointsData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControlType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJointsData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akushon_interfaces.proto.SetJointsData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akushon_interfaces.proto.SetJointsData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.SetJointsData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getJointsData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 control_type = 1;
 * @return {number}
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.getControlType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akushon_interfaces.proto.SetJointsData} returns this
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.setControlType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string joints_data = 2;
 * @return {string}
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.getJointsData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akushon_interfaces.proto.SetJointsData} returns this
 */
proto.akushon_interfaces.proto.SetJointsData.prototype.setJointsData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.toObject = function(opt_includeInstance) {
  return proto.akushon_interfaces.proto.ConfigRunAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akushon_interfaces.proto.ConfigRunAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.ConfigRunAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    controlType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    jsonAction: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akushon_interfaces.proto.ConfigRunAction}
 */
proto.akushon_interfaces.proto.ConfigRunAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akushon_interfaces.proto.ConfigRunAction;
  return proto.akushon_interfaces.proto.ConfigRunAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akushon_interfaces.proto.ConfigRunAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akushon_interfaces.proto.ConfigRunAction}
 */
proto.akushon_interfaces.proto.ConfigRunAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControlType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akushon_interfaces.proto.ConfigRunAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akushon_interfaces.proto.ConfigRunAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.ConfigRunAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getControlType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getActionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getJsonAction();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 control_type = 1;
 * @return {number}
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.getControlType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.akushon_interfaces.proto.ConfigRunAction} returns this
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.setControlType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string action_name = 2;
 * @return {string}
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.getActionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.akushon_interfaces.proto.ConfigRunAction} returns this
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.setActionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string json_action = 3;
 * @return {string}
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.getJsonAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.akushon_interfaces.proto.ConfigRunAction} returns this
 */
proto.akushon_interfaces.proto.ConfigRunAction.prototype.setJsonAction = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.toObject = function(opt_includeInstance) {
  return proto.akushon_interfaces.proto.SetTorquesData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.akushon_interfaces.proto.SetTorquesData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.SetTorquesData.toObject = function(includeInstance, msg) {
  var f, obj = {
    ids: jspb.Message.getFieldWithDefault(msg, 1, ""),
    torqueEnable: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.akushon_interfaces.proto.SetTorquesData}
 */
proto.akushon_interfaces.proto.SetTorquesData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.akushon_interfaces.proto.SetTorquesData;
  return proto.akushon_interfaces.proto.SetTorquesData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.akushon_interfaces.proto.SetTorquesData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.akushon_interfaces.proto.SetTorquesData}
 */
proto.akushon_interfaces.proto.SetTorquesData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIds(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTorqueEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.akushon_interfaces.proto.SetTorquesData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.akushon_interfaces.proto.SetTorquesData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.akushon_interfaces.proto.SetTorquesData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIds();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTorqueEnable();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string ids = 1;
 * @return {string}
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.getIds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.akushon_interfaces.proto.SetTorquesData} returns this
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.setIds = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool torque_enable = 2;
 * @return {boolean}
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.getTorqueEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.akushon_interfaces.proto.SetTorquesData} returns this
 */
proto.akushon_interfaces.proto.SetTorquesData.prototype.setTorqueEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


export default proto.akushon_interfaces.proto;
